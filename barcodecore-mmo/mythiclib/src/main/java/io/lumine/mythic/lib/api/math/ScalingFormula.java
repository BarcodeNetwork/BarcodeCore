package io.lumine.mythic.lib.api.math;

import org.apache.commons.lang.Validate;
import org.bukkit.configuration.ConfigurationSection;

import java.util.Random;

public class ScalingFormula {
    private final double base, scale, spread, maxSpread;

    private static final Random random = new Random();

    public static final ScalingFormula ZERO = new ScalingFormula(0, 0, 0, 0);

    /***
     * Loads a scaling formula
     *
     * @param object
     *            Can be either a number (constant formula) or a configuration
     *            section with keys base, scale, spread and max-spread.
     */
    public ScalingFormula(Object object) {
        Validate.notNull(object, "Config must not be null");

        if (object instanceof Number) {
            base = Double.parseDouble(object.toString());
            scale = 0;
            spread = 0;
            maxSpread = 0;
            return;
        }

        if (object instanceof ConfigurationSection) {
            ConfigurationSection config = (ConfigurationSection) object;
            base = config.getDouble("base");
            scale = config.getDouble("scale");
            spread = config.getDouble("spread");
            maxSpread = config.getDouble("max-spread");

            Validate.isTrue(spread >= 0, "Spread must be positive");
            Validate.isTrue(maxSpread >= 0, "Max spread must be positive");
            return;
        }

        throw new IllegalArgumentException("Must specify a config section or a number");
    }

    /***
     * Initializes a scaling formula
     *
     * @param base
     *            Base value
     * @param scale
     *            Value which scales with parameter x in the calculate(double)
     *            method
     * @param spread
     *            After calculating (base + scale * x), the formula applies a
     *            gaussian spread. If it's set to 0.1 then the final value will
     *            be "plus or minus 10%". This is not an average value because
     *            smaller offsets have higher chances to be selected (gaussian
     *            curve)
     * @param maxSpread
     *            Maximum relative spread. If it's set to 0.3, then for the same
     *            value of x, the random value generated by calculate(double)
     *            will oscillate between 0.7 * (base + scale * x) and 1.3 *
     *            (base + scale * x)
     */
    public ScalingFormula(double base, double scale, double spread, double maxSpread) {
        this.base = base;
        this.scale = scale;
        this.spread = spread;
        this.maxSpread = maxSpread;
    }

    public double getBase() {
        return base;
    }

    public double getScale() {
        return scale;
    }

    /***
     * @param x
     *            Parameter which the 'scale' value scales on
     * @return Generates a random value based on the formula. Details on how the
     *         formula works can be found in the main constructor javadocs
     */
    public double calculate(double x) {
        // calculate linear value
        double linear = base + scale * x;

        // apply gaussian distribution to add +- maxSpread%
        // spread represents the standard deviation in % of the calculated
        // linear value
        return linear * (1 + Math.min(Math.max(random.nextGaussian() * spread, -maxSpread), maxSpread));
    }
}

